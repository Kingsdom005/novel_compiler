S0 -> translation_unit
translation_unit -> external_declaration
external_declaration -> function_definition
external_declaration -> declaration
declaration -> type_specifier id ;
type_specifier -> void
type_specifier -> int
type_specifier -> double
function_definition -> type_specifier function_name parameter compound_statement
function_name -> id
parameter ->  ( )
compound_statement -> { decalration_list }
compound_statement -> { statement_list }
compound_statement -> { decalration_list statement_list }
decalration_list -> declaration
decalration_list -> decalration_list declaration
statement_list -> statement
statement_list -> statement_list statement
statement -> compound_statement
statement -> expression_statement
statement -> selection_statement M
statement -> iteration_statement M
statement -> jump_statement
expression_statement -> ;
expression_statement -> expression ;
expression -> assignment_expression
assignment_expression -> primary_expression = assignment_expression
assignment_expression -> logical_or_expression
logical_or_expression -> logical_or_expression || M logical_and_expression
logical_or_expression -> logical_and_expression
logical_and_expression -> logical_and_expression && M equality_expression
logical_and_expression -> equality_expression
equality_expression -> equality_expression == relational_expression
equality_expression -> relational_expression
relational_expression -> relational_expression < additive_expression
relational_expression -> relational_expression > additive_expression
relational_expression -> relational_expression <= additive_expression
relational_expression -> relational_expression >= additive_expression
relational_expression -> additive_expression
additive_expression -> additive_expression - multiplicative_expression
additive_expression -> additive_expression + multiplicative_expression
additive_expression -> multiplicative_expression
multiplicative_expression -> multiplicative_expression * primary_expression
multiplicative_expression -> multiplicative_expression / primary_expression
multiplicative_expression -> multiplicative_expression % primary_expression
multiplicative_expression -> primary_expression
primary_expression -> id
primary_expression -> double_num 
primary_expression -> int_num
primary_expression -> ( expression )
selection_statement -> if ( expression ) M statement
iteration_statement -> while ( M expression ) M statement
jump_statement -> continue ;
jump_statement -> break ;
jump_statement -> return ;
jump_statement -> return expression ;
M -> e
